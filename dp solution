/**  leetcode 63 unique path 2
     * this is a basic dp solution
     * dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
     * dp[0][0] = 1
     */
    public int uniquePathWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0][0] == 1) {
            return 0;
        }
        int row = obstacleGrid.length;
        int column = obstacleGrid[0].length;

        // define dp array
        int[][] dp = new int[row][column];
        dp[0][0] = 1;

        // first row
        for (int i = 1; i < row; ++i) {
            if (obstacleGrid[i][0] == 0) {
                dp[i][0] = dp[i - 1][0];
            } else {
                break;
            }
        }

        // first column
        for(int j = 1; j < column; ++j) {
            if (obstacleGrid[0][j] == 0) {
                dp[0][j] = dp[0][j - 1];
            } else {
                break;
            }
        }

        // other
        for (int i = 1; i < row; ++i) {
            for (int j = 1; j < column; ++j) {
                if (obstacleGrid[i][j] == 0) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[row - 1][column - 1];
    }
